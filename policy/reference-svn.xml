<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
 "/usr/share/sgml/docbook/dtd/xml/4.4/docbookx.dtd" [
<!ENTITY % included SYSTEM "included.ent">
%included;
]>
<section>
  <title>Using the SVN repository</title>

  <section>
    <title>Use SVN and let your users know about it</title>
    <para>
      (Hopefully) All OCaml-related Debian packages are maintained using a
      centralized <ulink url="http://subversion.tigris.org/">Subversion</ulink>
      (<acronym>SVN</acronym> for short) repository. This practice reduce the
      efforts needed to contribute work inside &ocaml-force; and, in case of
      need, provides a place where to massively perform changes to all
      OCaml-related Debian packages.
    </para>
    <para>
      Nonetheless, Debian users can benefit knowing we are using a SVN
      repository (they can for instance subscribe to the RSS feed for changes
      or have a place where to look for finding patches corresponding to bugs
      tagged "pending" in the BTS).
    </para>
    <para>
      For this reason <emphasis>it is recommended to add the
        <code>Vcs-Svn</code> and <code>Vcs-Browser</code> fields to the
        <filename>debian/control</filename> of packages maintained in
        &ocaml-force; SVN repository</emphasis>. Its name specifies that we are
      using Subversion as our Version Control System (<acronym>VCS</acronym>);
      their values are the URLs pointing to the package's trunk directory and to
      a browsable view of the same directory. See <ulink
        url="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=391023">Bug
        #391023</ulink> (which contains the forthcoming text for the Debian
      Developer's Reference) for more information about these fields.
    </para>
    <para>
      The general scheme for using the fields are thus:
      <programlisting>
    Vcs-Svn: svn://svn.debian.org/svn/pkg-ocaml-maint/trunk/packages/<emphasis>PACKAGE_NAME</emphasis>
    Vcs-Browser: http://svn.debian.org/wsvn/pkg-ocaml-maint/trunk/packages/<emphasis>PACKAGE_NAME</emphasis>/trunk/
      </programlisting>
      <example>
        <title>Usage example of the Vcs-* fields, from the
          <application>findlib</application> package
        </title>
        <programlisting>
    Source: findlib
    Section: devel
    Priority: optional
    Maintainer: Stefano Zacchiroli &lt;zack@debian.org&gt;
    Build-Depends: debhelper (>> 4.0.0), ocaml (>= 3.09.2), m4, gawk | awk, dpatch, cdbs
    Standards-Version: 3.7.2
    <emphasis>Vcs-Svn: svn://svn.debian.org/svn/pkg-ocaml-maint/trunk/packages/findlib</emphasis>
    <emphasis>Vcs-Browser: http://svn.debian.org/wsvn/pkg-ocaml-maint/trunk/packages/findlib/trunk/</emphasis>

    Package: ocaml-findlib
    Section: devel
    Architecture: any
    Depends: ocaml-${F:OCamlABI}, ${shlibs:Depends}, ${misc:Depends}
    Description: Management tool for OCaml programming language libraries
    ...
        </programlisting>
      </example>
    </para>
  </section>

  <section>
      <title>How to obtain a copy of the SVN repository</title>
      <para>
        You can obtain a copy of debian-ocaml-maint SVN repository by
        <programlisting>
    svn co svn+ssh://svn.debian.org/svn/pkg-ocaml-maint
        </programlisting>
        You must be member of the
        <ulink url="http://pkg-ocaml-maint.alioth.debian.org/">Debian
        OCaml Task Force</ulink> in order to have write access to the repository. 
      </para>
  </section>

  <section>
      <title>Structure of the SVN repository</title>
      <para>
          We keep all files of the debian subdirectory under SVN control, and
          upstream only as a compressed tarball. The rationale behind this is
          that changes to upstream files should be managed by the <application>dpatch</application> patch
          manager. Hence, all the diffs to upstream files are kept in a
          subdirectory of <filename>debian/</filename>, and it is not necessary to manage upstream on
          file-by-file basis.
      </para>

      <para>
          The structure of the pkg-ocaml-maint SVN repository is as follows, where
          generic names are indicated in square brackets <varname>[ .. ]</varname>, and where the
          contents of subdirectories not directly relevant for package management
          are not detailed:
          <programlisting>
   tags
     packages
       [package1]
         [version1]
         [version2]
         ...
       [package2]
         [version1]
         ...
       ...
     projects
   test
   trunk
     packages
       [package1]
         trunk
           debian
         tarballs
           [upstream-tarball-version1]
           [upstream-tarball-version2]
           ...
       [package2]
       ...
     policy
     projects
     tools
          </programlisting>
      </para>
  </section>

  <section>
      <title>How to add a new package to the SVN repository</title>
      <para>
          Place yourself in the directory <filename>trunk/packages</filename> of your working copy of
          the SVN repository. Create a directory with the same name as your
          source package (let's say, my-package), and subdirectories <filename>tarballs</filename>
          and <filename>trunk</filename>.  Put the current upstream tarball in <filename>tarballs</filename>, and the
          current debian directory with all its relevant files in <filename>trunk</filename>. This
          should now look like this:
          <programlisting>
   trunk/packages/my_package
     tarballs
       my_package_1.2.3.orig.tar.gz
     trunk
       debian
         changelog
         control
         copyright
         patches
           00_list
           01_patch1.dpatch
           ...
         ...
         </programlisting>
     </para>

     <para>
         If everything is in order you can do a <command>svn add my_package</command> from the <filename>trunk/packages</filename> directory, and eventually <command>svn commit</command>.
      </para>
  </section>

  <section>
      <title>How to set up your package for use with <application>svn-buildpackage</application></title>

      <para>
          Please see the <application>svn-buildpackage</application> documentation for complete
          information. The important issues here are:
          <itemizedlist>
              <listitem>
                  <para>
                      Since we keep upstream as a tarball we have to use <application>svn-buildpackage</application> in
                      so-called merge mode. This means that, before compiling the package,
                      the debianized source tree is constructed by untarring the orig tarball, and then merging the contents of the trunk subdirectory in it.
                  </para>
              </listitem>
              <listitem>
                  <para>
                      The structure of our SVN repository is not among the default structures
                      of <application>svn-buildpackage</application>. Hence, we have to override the default location of some
                      directories.
                  </para>
              </listitem>
          </itemizedlist>
      </para>

      <para>
          Place yourself in <filename>trunk/packages/my_packages/trunk</filename>, and do the following:
          <command>svn propset mergeWithUpstream 1 debian</command>.
          This registers the property "mergeWithUpstream" with the current
          directory, such that <application>svn-buildpackage</application> knows
          that it has to use merge mode as explained above.
      </para>

      <para>
          Create a file <filename>debian/svn-deblayout</filename> with the following contents:
          <programlisting>
  tagsUrl=svn+ssh://svn.debian.org/svn/pkg-ocaml-maint/tags/packages/my_package
          </programlisting>
      </para>

      <para>
          Remember that "my_package" has to be replaced by the name of your
          actual package. <application>svn-buildpackage</application> will not include this file in the
          source package when actually building the package.
      </para>

      <para>
          If you tried <application>svn-buildpackage</application> before writing your <filename>debian/svn-deblayout</filename> remember
          to delete <filename>.svn/deb-layout</filename>, since <application>svn-buildpackages</application> caches here the content
          of <filename>svn-deblayout</filename> (that would be empty in this case) and will ignore
          your <filename>debian/svn-deblayout</filename>.
      </para>
  </section>

  <section>
      <title>How to build a package with <application>svn-buildpackage</application></title>

      <para>
          Please refer to the <application>svn-builpackage</application> documentation for more complete
          information. Here is just a quick guide.
      </para>

      <para>
          All options, except those starting on <option>--svn</option>, are passed to
          <application>dpkg-buildpackage</application>. Hence, basic usage should be something like this
          (from the <filename>trunk/packages/my_package/trunk</filename> directory): <command>svn-buildpackage -rfakeroot -uc -us</command>.
      </para>

      <para>
        <application>svn-buildpackage</application> will complain when your copy
        of the debian directory is not in sync with the repository. You may use
        the option <option>--svn-ignore-new</option> to override this behaviour.
        The package will be build in the directory
        <filename>../build-area</filename>.
      </para>

      <para>
          If your package is ready for upload you may use the <option>--svn-tag</option> option
          for the final build. This will put a tag in the svn-repository on the
          current version, and add a new entry in the changlog to start working
          on the upcomming next version: <command>svn-buildpackage --svn-tag</command>.
          Provided you have commited all your changes to the svn repository, this
          will after a successful build of the package create a tag for the current
          version in <filename>tags/packages/my_package</filename>. The tagging is done directly in the
          SVN repository.
      </para>

      <tip>
          <para>
            Some useful aliases taken from the
            <application>svn-buildpackage</application> HOWTO:
              <programlisting>
  alias svn-b='svn-buildpackage -rfakeroot --svn-dont-clean -us -uc --svn-ignore'
  alias svn-bt='svn-buildpackage -rfakeroot --svn-lintian --svn-dont-clean --svn-tag'
              </programlisting>
          </para>

          <para>
              The former (<command>svn-b</command>) is to be used for test builds, while you are
              working on your package; while the latter (<command>svn-bt</command>) is to be used at
              the end, after you commit your changes and just before uploading a new
              version of the package to the debian archive.
          </para>

          <para>
              Adding -k&lt;your gpg id&gt; to the svn-bt alias may also be useful when working on
              collaboratively maintained packages:
              <programlisting>
  alias svn-bt='svn-buildpackage -rfakeroot -k&lt;gpgid&gt; --svn-lintian --svn-dont-clean --svn-tag'
              </programlisting>
          </para>
      </tip>
  </section>

  <section>
      <title>dpatch</title>

      <para>
          dpatch will work properly at package build time with the SVN
          structure described above since all of the build process will be
          carried out in a fresh directory. However, invoking
          <filename>debian/rules</filename> with the "clean" target in
          the <filename>trunk/</filename> directory will fail since
          dpatch is unable to de-apply patches. Passing
          <option>--svn-dont-clean</option> to
          <application>svn-buildpackage</application> fixes this
          misbehaviour (aliases suggested above already include this
          flag).  </para>

      <para>
          If you want to use dpatch-edit-patch to handle patches, you will need to invoke
          it in "debian only mode" (<option>-b</option> flag, see man dpatch-edit-patch) and to tell him
          where to find the upstream tarball. Adding the following line to your
          <filename>~/.dpatch.conf</filename> will be enough:
          <programlisting>
  conf_origtargzpath=../tarballs
          </programlisting>
      </para>
  </section>
</section>
